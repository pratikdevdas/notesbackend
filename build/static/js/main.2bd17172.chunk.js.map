{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","put","Notification","message","className","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","console","log","length","notesToShow","filter","map","i","find","n","changedNote","returnedNotes","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2bd17172.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note,toggleImportance }) => {\n  const label = note.important\n  ? 'make not important' : 'make important'\n  return (\n    <li>{note.content}\n    <button onClick={toggleImportance}> {label}</button></li>\n  )\n}\n\nexport default Note","import axios from \"axios\";\nconst baseUrl='/api/notes'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = (newObject) => {\n    const request = axios.post(baseUrl,newObject)\n    return request.then(response=>response.data)\n}\n\nconst update = (id,newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default {getAll,create,update}","import React, { useState, useEffect } from 'react'\n// import axios from 'axios'\nimport Note from './components/Note'\nimport noteService from './services/notes'\n\nconst Notification = ({message}) =>\n{\n  if (message===null){\n    return null\n    }\n\n    return(\n    <div className=\"error\">\n    {message}\n    </div>)\n}\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('dsvfsd')\n\n  useEffect(() => {\n   noteService\n   .getAll()\n   .then(initialNotes => {\n     setNotes(initialNotes)\n   })\n  }, [])\n  console.log('render', notes.length, 'notes')\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n    }\n    noteService\n    .create(noteObject)\n    .then(returnedNotes =>{ \n    setNotes(notes.concat(returnedNotes))\n    setNewNote('')\n     })\n  }\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n   const toggleImportanceOf = (id)=>{\n    // const url = `http://localhost:3001/notes/${id}`\n      const note = notes.find(n=> n.id === id)\n      const changedNote = {...note, important: !note.important}\n   \n      noteService\n      .update(id,changedNote)\n      .then (returnedNotes => {\n        setNotes(notes.map(note=>note.id !== id ? note : returnedNotes))\n      })\n      .catch(error=>{\n        setErrorMessage(`the note ${note.content} was already deleted`)\n        setTimeout(()=>{setErrorMessage(null)\n        },5000)\n        setNotes(notes.filter(n => n.id !== id))\n         })\n     console.log(`importance of ${id} needs to be toggled`)\n   }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important === true)\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage}/>\n      <div><button onClick={() => setShowAll(!showAll)}>\n        show {showAll ? 'important' : 'all'}\n      </button></div>\n      <ul>\n        {notesToShow.map((note,i) =>\n          <Note key={i} \n          note={note} \n          toggleImportance={()=>toggleImportanceOf(note.id)}\n           />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote}\n          onChange={handleNoteChange} />\n        <button type=\"submit\">SAVE  </button>\n      </form>\n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom';\nimport App from './App';\n\nconst notes = [\n  {\n    id: 1,\n    content: 'HTML is easy',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true\n  },\n  {\n    id: 2,\n    content: 'Browser can execute only JavaScript',\n    date: '2019-05-30T18:39:34.091Z',\n    important: false\n  },\n  {\n    id: 3,\n    content: 'GET and POST are the most important methods of HTTP protocol',\n    date: '2019-05-30T19:20:14.298Z',\n    important: true\n  }\n]\n\nReactDOM.render(\n    <App notes={notes} />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}